$.fn.dataTable.ext.buttons.reload={text:'Reload Data',titleAttr:'Reload Data',className:'buttons-reload',action:function(e,dt,node,config){if(dt.ajax.url()){this.ajax.reload()}else{if(dt.rows().data().length){this.order.neutral().draw()}}}};$.fn.dataTable.ext.buttons.cardview={text:'Toggle View',titleAttr:'Toggle View',className:'buttons-cardview',action:function(e,dt,node,config){const tableNodeId=`#${dt.table().node().id}`;const wrapperNodeId=`${tableNodeId}_wrapper`;const column_hide_in_card=$(dt.table().node()).data('card-hide-col');const $dt=$(tableNodeId);const toggle_columns_visibility=column_hide_in_card&&typeof column_hide_in_card=='object'?column_hide_in_card:[];let show_toggle_columns=!1;let hide_toggle_columns=!1;if($(wrapperNodeId).hasClass('dt-card')){if(toggle_columns_visibility.length>0){show_toggle_columns=!0}
$(`${wrapperNodeId} .cardview-col-header`).remove()}else{const theadRows=$(`${tableNodeId} thead tr`);let labels=[];if(theadRows.length==1){$(`${tableNodeId} thead th`).each(function(){labels.push($(this).text())})}
if(theadRows.length==2){let row_1=[];let row_2=[];let row_result=[];theadRows.each((index,tr)=>{if(index==0){$(tr).children().each((cIndex,th)=>row_1.push(th))}
if(index==1){$(tr).children().each((cIndex,th)=>row_2.push(th))}});row_1.forEach((th,index)=>{const colspan=$(th).attr('colspan');if(colspan==1){row_result.push($(th).text())}else{for(let i=0;i<colspan;i++){const row_2_th=row_2.shift();row_result.push($(row_2_th).text())}}});labels=row_result}
$(`${tableNodeId} tbody tr`).each(function(){$(this).find('td').each(function(column){$(`<label class='cardview-col-header'>${labels[column]}</label>`).prependTo($(this))})});if(toggle_columns_visibility.length>0){hide_toggle_columns=!0}}
$(wrapperNodeId).toggleClass('dt-card');$dt.data('view-status',$(wrapperNodeId).hasClass('dt-card')?'card':'table');if($(wrapperNodeId).hasClass('dt-card')){$(wrapperNodeId).addClass('card-view');$(wrapperNodeId).removeClass('table-view')}else{$(wrapperNodeId).addClass('table-view');$(wrapperNodeId).removeClass('card-view')}
if(show_toggle_columns){dt.columns(toggle_columns_visibility).visible(!0);$(`${wrapperNodeId} .cardview-col-header`).remove()}
if(hide_toggle_columns){dt.columns(toggle_columns_visibility).visible(!1)}
const toggleView=new CustomEvent('toggleView',{detail:{view:$dt.data('view-status'),},});dt.table().node().dispatchEvent(toggleView)}};class EnhanceDataTable
{#_debug=!1;#_datatable;#_id;#_checkbox_header_triggered;#_default_thead;#_default_checkbox_column_header_class='.column-checkbox-header';#_default_checkbox_column_class='.column-checkbox';#_default_rowreorder_column_header_class='.column-rowReorder-header';#_default_rowreorder_column_class='.column-rowReorder';#_current_page=0;#_props={column_hide_in_card:[],three_states_sort:!0,show_row_number:!0,show_checkbox:!1,checked_visible_only:!1,enable_checkbox_event:!1,sticky_header:!1,search:{return:!0,},language:{search:'',searchPlaceholder:'ENTER Search; ESC Clear',},};#_initDataTable(){let proceed_init=this.#_setupCheckboxClasses();if(proceed_init){proceed_init=this.#_setupRowReorderClasses()}
if(!proceed_init){return proceed_init}
if(this.#_debug){console.error(`init : ${this.#_id}`)}
this.#_retainDefaultTheadStructure();this.#_setupRowCallback();this.#_setupDrawCallback();this.#_setupInitComplete();this.#_setupCheckboxColumn();this.#_setupRowReorderColumn();this.#_setupRowNumber();$(this.#_id).data('view-status','table');if(this.#_props.hasOwnProperty('column_hide_in_card')){$(this.#_id).data('card-hide-col',this.#_props.column_hide_in_card)}
const datatable_id=this.#_id;if($(datatable_id).length>0){const props=this.#_props;const wrapper=`${datatable_id}_wrapper`;this.#_datatable=$(datatable_id).DataTable(props);this.dataTable=this.#_datatable;$(wrapper).addClass('table-view');if(props.sticky_header){$(`${wrapper} thead`).addClass('dt-sticky-header')}
return!0}else{console.error(`[EnhanceDataTable] Error: DOM element '${datatable_id}' not found !`);window.alert(`[EnhanceDataTable] Error: DOM element '${datatable_id}' not found !`);return!1}}
#_setupCheckboxClasses(){if(this.#_props.hasOwnProperty('checkbox_header_class')){this.#_default_checkbox_column_header_class=this.#_props.checkbox_header_class}
if(this.#_props.hasOwnProperty('checkbox_class')){this.#_default_checkbox_column_class=this.#_props.checkbox_class}
if(this.#_props.enable_checkbox_event){const checkboxHeaderClass=this.#_default_checkbox_column_header_class;if($(`${this.#_id} ${checkboxHeaderClass}`).length==0){console.error(`[EnhanceDataTable] Error: Checkbox header element '${this.#_id} ${checkboxHeaderClass}' not found !`);window.alert(`[EnhanceDataTable] Error: Checkbox header element '${this.#_id} ${checkboxHeaderClass}' not found !`);return!1}}
return!0}
#_setupRowReorderClasses(){if(this.#_props.hasOwnProperty('rowreorder_header_class')){}
if(this.#_props.hasOwnProperty('rowreorder_class')){}
return!0}
#_retainDefaultTheadStructure(){this.#_default_thead=$(`${this.#_id} thead`).clone()}
#_cloneObject(src,method='jquery'){switch(method){case 'jsoncopy':return JSON.parse(JSON.stringify(src));case 'objectassign':return Object.assign({},src);case 'iteration':let target={};for(let prop in src){if(src.hasOwnProperty(prop)){target[prop]=src[prop]}}
return target;default:return $.extend(!0,{},src)}}
#_setupRowCallback(){const self=this;const wrapper=`${this.#_id}_wrapper`;let userDefinedRowCallback=function(){};if(this.#_props.rowCallback&&typeof this.#_props.rowCallback=='function'){userDefinedRowCallback=this.#_props.rowCallback;delete this.#_props.rowCallback}
this.#_props.rowCallback=function(row,data,displayNum,displayIndex,dataIndex){if($(wrapper).hasClass('dt-card')){const labels=self.#_getColumnWithoutColspan();$('td',row).each(function(column,td){if($(td).find('label').length==0){$(`<label class='cardview-col-header'>${labels[column]}</label>`).prependTo($(this))}})}
if(self.#_props.show_checkbox||self.#_props.enable_checkbox_event){if(Array.isArray(data)){if(self.#_props.checked_visible_only){}else{const checkboxHeaderClass=self.#_default_checkbox_column_header_class;const isCheckboxHeaderChecked=$(`${self.#_id} ${checkboxHeaderClass} input[type="checkbox"]`).is(':checked');const isCheckboxHeaderIndeterminate=$(`${self.#_id} ${checkboxHeaderClass} input[type="checkbox"]`).is(':indeterminate');if(isCheckboxHeaderChecked){$('input[type="checkbox"]',row).prop('checked',!0)}else{if(!isCheckboxHeaderIndeterminate){$('input[type="checkbox"]',row).prop('checked',!1)}}}}else{$('input[type="checkbox"]',row).prop('checked',data.checkbox?!0:!1)}}
userDefinedRowCallback(row,data,displayNum,displayIndex,dataIndex)}}
#_setupDrawCallback(){const self=this;const wrapper=`${this.#_id}_wrapper`;let userDefinedDrawCallback=function(){};if(this.#_props.drawCallback&&typeof this.#_props.drawCallback=='function'){userDefinedDrawCallback=this.#_props.drawCallback;delete this.#_props.drawCallback}
this.#_props.drawCallback=function(settings){if($(self.#_id).data('view-status')=='table'){$(`${wrapper} .cardview-col-header`).remove()}
if(self.#_props.checked_visible_only){if(self.#_debug){console.warn(`drawCallback() update ${self.#_default_checkbox_column_header_class} >>> input[type="checkbox"] state`)}
self.#_checkboxHeaderUpdateStatus();self.#_checkboxHeaderIndeterminate()}
userDefinedDrawCallback(settings)}}
#_getColumnWithoutColspan(use_default_thead=!1){const self=this;let theadRows=$(`${this.#_id} thead tr`);let labels=[];if(use_default_thead){theadRows=$(this.#_default_thead).find('tr');labels=this.#_combineColspanColumn(theadRows,['#'],use_default_thead)}else{if(theadRows.length==1){$(`${self.#_id} thead th`).each(function(){labels.push($(this).text())})}
if(theadRows.length==2){labels=this.#_combineColspanColumn(theadRows)}}
return labels}
#_combineColspanColumn(theadRows,row_result=[],use_default_thead){let row_1=[];let row_2=[];theadRows.each((index,tr)=>{if(index==0){$(tr).children().each((cIndex,th)=>row_1.push(th))}
if(index==1){$(tr).children().each((cIndex,th)=>row_2.push(th))}});if(use_default_thead){row_1.forEach((th,index)=>{const colspan=$(th).attr('colspan');if(colspan>0){for(let i=0;i<colspan;i++){const row_2_th=row_2.shift();row_result.push($(row_2_th).text())}}else{row_result.push($(th).text())}})}else{row_1.forEach((th,index)=>{const colspan=$(th).attr('colspan');if(colspan==1){row_result.push($(th).text())}else{for(let i=0;i<colspan;i++){const row_2_th=row_2.shift();row_result.push($(row_2_th).text())}}})}
return row_result}
#_setupInitComplete(){const self=this;let userDefinedInitComplete=function(){};if(this.#_props.initComplete&&typeof this.#_props.initComplete=='function'){userDefinedInitComplete=this.#_props.initComplete;delete this.#_props.initComplete}
this.#_props.initComplete=function(settings,json){if(self.#_props.show_checkbox||self.#_props.enable_checkbox_event){self.#_setupCheckboxHeaderEvent(settings,json)}
self.#_setupInputSearchEscEvent(settings,json);userDefinedInitComplete(settings,json)}}
#_toggleView(){const wrapper=`${this.#_id}_wrapper`;const column_hide_in_card=$(this.#_id).data('card-hide-col');const toggle_columns_visibility=column_hide_in_card&&typeof column_hide_in_card=='object'?column_hide_in_card:[];let show_toggle_columns=!1;let hide_toggle_columns=!1;if($(wrapper).hasClass('dt-card')){if(toggle_columns_visibility.length>0){show_toggle_columns=!0}
$(`${wrapper} .cardview-col-header`).remove()}else{const labels=this.#_getColumnWithoutColspan();$(`${this.#_id} tbody tr`).each(function(){$(this).find('td').each(function(column){$(`<label class='cardview-col-header'>${labels[column]}</label>`).prependTo($(this))})});if(toggle_columns_visibility.length>0){hide_toggle_columns=!0}}
$(wrapper).toggleClass('dt-card');$(this.#_id).data('view-status',$(wrapper).hasClass('dt-card')?'card':'table');if($(wrapper).hasClass('dt-card')){$(wrapper).addClass('card-view');$(wrapper).removeClass('table-view')}else{$(wrapper).addClass('table-view');$(wrapper).removeClass('card-view')}
if(show_toggle_columns){this.#_datatable.columns(toggle_columns_visibility).visible(!0);$(`${wrapper} .cardview-col-header`).remove()}
if(hide_toggle_columns){this.#_datatable.columns(toggle_columns_visibility).visible(!1)}
const toggleView=new CustomEvent('toggleView',{detail:{view:$(this.#_id).data('view-status'),},});this.#_datatable.table().node().dispatchEvent(toggleView)}
#_setupCheckboxHeaderEvent(settings,json){const self=this;const checkboxHeaderClass=this.#_default_checkbox_column_header_class;$(this.#_id).on('click',`${checkboxHeaderClass} input[type="checkbox"]`,function(e){if(self.#_debug){console.warn(`click >>> ${self.#_default_checkbox_column_header_class} input[type="checkbox"]`)}
self.#_checkbox_header_triggered=!0;const checkboxClass=self.#_default_checkbox_column_class;const checkboxExist=$(`${self.#_id} ${checkboxClass}`).length>0;if(checkboxExist){if(self.#_props.checked_visible_only){const visible_checkbox=$(`${self.#_id} tbody ${checkboxClass}:visible`);const info=self.#_datatable.page.info();const page_number=info.page;const page_length=info.length;const visible_row_indexes=visible_checkbox.map((index,checkbox)=>{return index+(page_number*page_length)});if(this.checked){self.select(visible_row_indexes)}else{self.deselect(visible_row_indexes)}}else{if(this.checked){self.#_datatable.rows().select()}else{self.#_datatable.rows().deselect()}}}else{self.#_checkbox_header_triggered=!1;console.error(`[EnhanceDataTable] Error: Checkbox element '${checkboxClass}' not found !`);window.alert(`[EnhanceDataTable] Error: Checkbox element '${checkboxClass}' not found !`)}})}
#_setupInputSearchEscEvent(settings,json){const self=this;const wrapper=`${this.#_id}_wrapper`;$(`${wrapper} .dataTables_filter input[type="search"]`).on('keyup',function(e){if(self.#_debug){console.warn('keyup >>> .dataTables_filter input[type="search"]')}
if(e.which==27){self.#_datatable.search('').draw()}})}
#_setupRowNumber(){if(this.#_props.show_row_number){const hasIndexColumn=this.#_props.columns.find((column)=>column.data=='rowNumber');if(!hasIndexColumn){let maxRowSpan=1;$(`${this.#_id} thead th`).each((index,th)=>{const thRowSpan=$(th).attr('rowspan');if(thRowSpan>maxRowSpan){maxRowSpan=thRowSpan}});const indexColumn=`<th rowspan="${maxRowSpan}" class="column-row-number">#</th>`;$(`${this.#_id} thead tr:first-child`).prepend($(indexColumn));if($(`${this.#_id} tfoot tr:first-child`).length>0){$(`${this.#_id} tfoot tr:first-child`).prepend($(indexColumn))}
this.#_props.columns.unshift({data:'rowNumber',searchable:!1,orderable:!1,sortable:!1,className:'column-row-number',width:30,})}}}
#_setupCheckboxColumn(){if(this.#_props.show_checkbox){const hasCheckboxColumn=this.#_props.columns.find((column)=>column.data=='checkbox');if(!hasCheckboxColumn){let maxRowSpan=1;$(`${this.#_id} thead th`).each((index,th)=>{const thRowSpan=$(th).attr('rowspan');if(thRowSpan>maxRowSpan){maxRowSpan=thRowSpan}});const checkbox_header_class=this.#_default_checkbox_column_header_class[0]=='.'?this.#_default_checkbox_column_header_class.slice(1):this.#_default_checkbox_column_header_class;const checkboxColumn=`<th rowspan="${maxRowSpan}" class="${checkbox_header_class} dt-center">
          <input type="checkbox" class="form-check-input" />
        </th>`;const checkboxColumnElement=$(checkboxColumn);$(`${this.#_id} thead tr:first-child`).prepend(checkboxColumnElement);const checkbox_class=this.#_default_checkbox_column_class[0]=='.'?this.#_default_checkbox_column_class.slice(1):this.#_default_checkbox_column_class;this.#_props.columns.unshift({data:'checkbox',searchable:!1,orderable:!1,sortable:!1,className:'dt-center',width:21,render:function(data,type,row,meta){return `<input type="checkbox" class="form-check-input ${checkbox_class}" />`}})}
const showRowNumber=this.#_props.show_row_number;const rowReorder=this.#_props.rowReorder;let default_select_prop={style:'multiple',};if(showRowNumber&&rowReorder){default_select_prop.selector='td:nth-child(3) input[type="checkbox"]'}else{if(showRowNumber){default_select_prop.selector='td:nth-child(2) input[type="checkbox"]'}else{default_select_prop.selector='td:first-child input[type="checkbox"]'}}
const hasSelectProperty=this.#_props.hasOwnProperty('select');if(hasSelectProperty){this.#_props.select=_.merge(default_select_prop,this.#_props.select)}else{this.#_props.select=default_select_prop}}}
#_setupRowReorderColumn(){if(this.#_props.hasOwnProperty('rowReorder')){const hasRowReorderColumn=this.#_props.columns.find((column)=>column.data=='rowReorder');if(!hasRowReorderColumn){let maxRowSpan=1;$(`${this.#_id} thead th`).each((index,th)=>{const thRowSpan=$(th).attr('rowspan');if(thRowSpan>maxRowSpan){maxRowSpan=thRowSpan}});const rowReorderColumn=`<th rowspan="${maxRowSpan}" class="column-rowReorder-header dt-center"></th>`;const rowReorderColumnElement=$(rowReorderColumn);$(`${this.#_id} thead tr:first-child`).prepend(rowReorderColumnElement);this.#_props.columns.unshift({data:'rowReorder',searchable:!1,orderable:!0,sortable:!1,className:'dt-center reorder',width:20,render:function(data,type,row,meta){return `≡`}});const rowReorder=this.#_props.rowReorder;let default_rowReorder_prop={selector:'td.reorder',update:!1,};if(typeof rowReorder=='boolean'){this.#_props.rowReorder=default_rowReorder_prop}else{this.#_props.rowReorder=_.merge(default_rowReorder_prop,this.#_props.rowReorder)}}}}
#_rowReorderEvent(){const self=this;const wrapper=`${this.#_id}_wrapper`;this.#_datatable.on('row-reorder',function(e,diff,edit){if(self.#_debug){console.warn('datatable >>> row-reorder')}
const temp_data_arr={};diff.forEach(info=>temp_data_arr[info.oldPosition]=self.#_datatable.row(info.oldPosition).data());diff.forEach(info=>self.#_datatable.row(info.newPosition).data(temp_data_arr[info.oldPosition]));self.#_datatable.draw()})}
#_renderRowNumber(){const self=this;const wrapper=`${this.#_id}_wrapper`;let i=1;this.#_datatable.cells(null,0,{search:'applied',order:'applied'}).every(function(cell){if($(wrapper).hasClass('dt-card')){const first_column_text=$(`${self.#_id} thead th:first`).text();this.data(`<label class='cardview-col-header'>${first_column_text}</label>${(i++).toString()}`)}else{this.data(i++)}})}
#_renderRowNumberEvent(){const self=this;const wrapper=`${this.#_id}_wrapper`;this.#_datatable.on('order.dt search.dt',function(e){if(self.#_debug){console.warn('datatable >>> order.dt search.dt')}
if(self.#_props.show_row_number){if(self.#_debug){console.warn('datatable >>> order.dt search.dt >>> show_row_number')}
self.#_renderRowNumber()}
if(self.#_props.three_states_sort){if(self.#_debug){console.warn('datatable >>> order.dt search.dt >>> three_states_sort')}
if(e.type=='order'){if(self.#_datatable.settings().order().length===1){const visibleColumns=self.#_datatable.settings().columns().visible();const columnMapping={};let countMapping=0;visibleColumns.each((visibility,index)=>{if(visibility){columnMapping[index]=countMapping++}});let order=self.#_datatable.settings().order()[0];let th=$(`${self.#_id} th:eq(${columnMapping[order[0]]})`);if(th.attr('data-sort-next')==='false'){self.resetOrder();th.attr('data-sort-next',null)}else{th.attr('data-sort-next',order[1]==='desc'?!1:!0)}}}}})}
#_columnVisibilityEvent(){const self=this;const wrapper=`${this.#_id}_wrapper`;this.#_datatable.on('column-visibility.dt',function(e,settings,column,state){if(self.#_debug){console.warn('datatable >>> column-visibility.dt')}
if($(wrapper).hasClass('dt-card')){if(state){var run=!1;run=!0;if(run){self.#_datatable.cells(null,column).every(function(cell){if($(this.node()).find('.cardview-col-header').length==0){let original_content=this.data()==null||this.data()==undefined?'':this.data();let nth_column_text=$(`${self.#_id} thead th:nth-child(${column})`).text();const theadRows=$(`${self.#_id} thead tr`);if(theadRows.length==2){const labels=self.#_getColumnWithoutColspan(!0);nth_column_text=labels[column]}
if(nth_column_text==undefined){nth_column_text='Error Column'}
let changedData=original_content;if(typeof this.data()=='object'){changedData=this.data()}else{const original_content_text=original_content.toString();if(original_content_text.indexOf('cardview-col-header')==-1){changedData=`<label class='cardview-col-header'>${nth_column_text}</label>${original_content}`}}
this.data(changedData)}})}}}else{if(state){const cardviewColHeader=$(`${wrapper} .cardview-col-header`);if(cardviewColHeader.length>0){cardviewColHeader.remove()}}}})}
#_selectDeselectEvent(){if(this.#_props.show_checkbox||this.#_props.enable_checkbox_event){const self=this;this.#_datatable.on('select',function(e,dt,type,indexes){if(self.#_debug){console.warn('datatable >>> select')}
const checkbox_column=self.#_props.show_row_number?1:0;indexes.forEach((rowIndex,index)=>{const currentData=dt.cell(rowIndex,checkbox_column).data();if(currentData.toString()=='true'||currentData.toString()=='false'){dt.cell(rowIndex,checkbox_column).data(!0)}});const checkboxClass=self.#_default_checkbox_column_class;if(self.#_checkbox_header_triggered){if(self.#_debug){console.warn('#_checkbox_header_triggered >>> update DOM checkbox')}
$(`${self.#_id} tbody ${checkboxClass}:visible`).prop('checked',!0)}else{if(self.#_debug){console.warn('row_checkbox_triggered >>> update DOM checkbox')}
const pageInfo=self.#_datatable.page.info();const pageLength=pageInfo.length;const rowStart=pageInfo.start;const rowEnd=pageInfo.end;indexes.forEach((rowIndex,index)=>{if(rowStart<=rowIndex&&rowIndex<=(rowEnd-1)){const domRowIndex=rowIndex%pageLength;$(`${self.#_id} tbody tr:eq(${domRowIndex}) td ${checkboxClass}`).attr('checked',!0)}})}
if(!self.#_checkbox_header_triggered){self.#_checkboxHeaderUpdateStatus();self.#_checkboxHeaderIndeterminate()}
self.#_checkbox_header_triggered=!1});this.#_datatable.on('deselect',function(e,dt,type,indexes){if(self.#_debug){console.warn('datatable >>> deselect')}
const checkbox_column=self.#_props.show_row_number?1:0;indexes.forEach((rowIndex,index)=>{const currentData=dt.cell(rowIndex,checkbox_column).data();if(currentData.toString()=='true'||currentData.toString()=='false'){dt.cell(rowIndex,checkbox_column).data(!1)}});const checkboxClass=self.#_default_checkbox_column_class;if(self.#_checkbox_header_triggered){if(self.#_debug){console.warn('#_checkbox_header_triggered >>> update DOM checkbox')}
$(`${self.#_id} tbody ${checkboxClass}:visible`).prop('checked',!1)}else{if(self.#_debug){console.warn('row_checkbox_triggered >>> update DOM checkbox')}
const pageInfo=self.#_datatable.page.info();const pageLength=pageInfo.length;const rowStart=pageInfo.start;const rowEnd=pageInfo.end;indexes.forEach((rowIndex,index)=>{if(rowStart<=rowIndex&&rowIndex<=(rowEnd-1)){const domRowIndex=rowIndex%pageLength;$(`${self.#_id} tbody tr:eq(${domRowIndex}) td ${checkboxClass}`).attr('checked',!1)}})}
if(!self.#_checkbox_header_triggered){self.#_checkboxHeaderUpdateStatus();self.#_checkboxHeaderIndeterminate()}
self.#_checkbox_header_triggered=!1})}}
#_checkboxHeaderIndeterminate(checkTotalRows){if(this.#_debug){console.warn('#_checkboxHeaderIndeterminate')}
if(!this.#_datatable){return}
let totalRows=this.#_datatable.data().length;let selectedRows=this.#_datatable.rows('.selected').data().length;if(this.#_props.checked_visible_only){const checkboxClass=this.#_default_checkbox_column_class;totalRows=$(`${this.#_id} tbody ${checkboxClass}:visible`).length;selectedRows=$(`${this.#_id} tbody ${checkboxClass}:visible:checked`).length}else{}
if(checkTotalRows>0){totalRows=checkTotalRows}
if(this.#_debug){console.log(`totalRows : ${totalRows}`);console.log(`selectedRows : ${selectedRows}`)}
const checkboxHeaderClass=this.#_default_checkbox_column_header_class;const indeterminate=(selectedRows==0||selectedRows==totalRows)?!1:!0;$(`${this.#_id} ${checkboxHeaderClass} input[type="checkbox"]`).prop('indeterminate',indeterminate);return indeterminate}
#_checkboxHeaderUpdateStatus(checkTotalRows){if(this.#_debug){console.warn('#_checkboxHeaderUpdateStatus')}
if(!this.#_datatable){return}
let totalRows=this.#_datatable.data().length;let selectedRows=this.#_datatable.rows('.selected').data().length;if(this.#_props.checked_visible_only){const checkboxClass=this.#_default_checkbox_column_class;totalRows=$(`${this.#_id} tbody ${checkboxClass}:visible`).length;selectedRows=$(`${this.#_id} tbody ${checkboxClass}:visible:checked`).length}else{}
if(checkTotalRows>0){totalRows=checkTotalRows}
if(this.#_debug){console.log(`totalRows : ${totalRows}`);console.log(`selectedRows : ${selectedRows}`)}
const checkboxHeaderClass=this.#_default_checkbox_column_header_class;const checked=selectedRows==totalRows?!0:!1;$(`${this.#_id} ${checkboxHeaderClass} input[type="checkbox"]`).prop('checked',checked);return checked}
constructor(){let args=arguments[0];let args_1=arguments[1];if(typeof args==='object'){if(!args.id){return console.error("[EnhanceDataTable] Error: Property 'id' is required !")}
if(!args.columns){return console.error("[EnhanceDataTable] Error: Property 'columns' is required !")}
this.#_id=args.id;delete args.id}
this.#_props=_.merge(this.#_props,args);const init_success=this.#_initDataTable();if(init_success){this.#_renderRowNumberEvent();this.#_columnVisibilityEvent();this.#_selectDeselectEvent();this.#_rowReorderEvent()}}
getAjaxUrl(){return this.#_datatable.ajax.url()}
setAjaxUrl(url,autoRefresh=!0,callback=null,resetPaging=!0){const hasAjax=this.#_props.ajax?!0:!1;if(hasAjax){if(autoRefresh){this.#_datatable.ajax.url(url).load(callback,resetPaging)}else{this.#_datatable.ajax.url(url)}}}
getView(){return $(this.#_id).data('view-status')}
setView(view='table'){if((view=='table'||view=='card')&&$(this.#_id).data('view-status')!=view){this.toggleView();return!0}
return!1}
toggleView(){const previousView=$(this.#_id).data('view-status');this.#_toggleView();return{previousView:previousView,view:$(this.#_id).data('view-status'),}}
getRows(mode='all'){let rules={};if(mode=='filtered'){rules={search:'applied'}}
const dtRows=this.#_datatable.rows(rules);const dtRowsData=this.#_datatable.rows().data();const rowIndexes=dtRows[0];const rows=[];rowIndexes.forEach(index=>rows.push(dtRowsData[index]));return rows}
getRowData(rowIndex=-1){if(rowIndex>-1){return this.#_datatable.row(rowIndex).data()}
return[]}
getSelectedRowIds(rowSelector='.selected'){const ids=[];const selectedData=this.#_datatable.rows(rowSelector).data();for(let index=0;index<selectedData.length;index++){const data=selectedData[index];if(Array.isArray(data)){data.forEach(element=>{if(element.indexOf('type="checkbox"')>-1){const checkboxElement=$(element);const id=checkboxElement.data('id');ids.push(id)}})}else{ids.push(data.id)}}
return ids}
getSelectedRowDatas(rowSelector='.selected'){const datas=[];const selectedData=this.#_datatable.rows(rowSelector).data();for(let index=0;index<selectedData.length;index++){datas.push(selectedData[index])}
return datas}
refresh(callback=null,resetPaging=!0){const hasAjax=this.#_props.ajax?!0:!1;if(hasAjax){this.#_datatable.ajax.reload(callback,resetPaging)}else{if(this.#_datatable.rows().data().length>0){this.resetOrder()}}}
on(event,selector,callback){$(this.#_id).on(event,selector,callback)}
search(input=''){this.#_datatable.search(input).draw()}
updateData(data,resetPaging=!0){if(!resetPaging){const page=this.#_datatable.page.info();const page_number=page.page;this.#_current_page=page_number}
this.resetOrder();this.clearData();this.#_datatable.rows.add(data).draw();if(!resetPaging){const new_page=this.#_datatable.page.info();const new_page_total=new_page.pages-1;this.#_current_page=this.#_current_page<=new_page_total?this.#_current_page:new_page_total;this.#_datatable.page(this.#_current_page).draw(!1)}}
clearData(){this.#_datatable.clear().draw()}
resetOrder(){this.#_datatable.order.neutral().draw()}
select(rowIndex){const row_data=this.#_datatable.rows(rowIndex).data();if(Array.isArray(row_data[0])){$(`${this.#_id} tbody tr:eq(${rowIndex}) input[type="checkbox"]`).prop('checked',!0)}
this.#_datatable.rows(rowIndex).select()}
deselect(rowIndex){const row_data=this.#_datatable.rows(rowIndex).data();if(Array.isArray(row_data[0])){$(`${this.#_id} tbody tr:eq(${rowIndex}) input[type="checkbox"]`).prop('checked',!1)}
this.#_datatable.rows(rowIndex).deselect()}}